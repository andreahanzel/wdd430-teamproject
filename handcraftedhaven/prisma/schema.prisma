generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  reviews       Review[]
  cartItems     CartItem[]
  orders        Order[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal  @db.Decimal(10, 2)
  image       String
  category    String
  color       String?
  material    String?
  sellerId    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  seller      Seller   @relation(fields: [sellerId], references: [id])
  reviews     Review[]
  cartItems   CartItem[]
  orderItems  OrderItem[]
}

model Seller {
  id           Int       @id @default(autoincrement())
  name         String
  shopName     String
  profileImage String
  location     String
  rating       String
  sales        String
  bio          String
  story        String    @db.Text
  contact      String
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  products     Product[]
  reviews      Review[]
}

model Review {
  id        Int      @id @default(autoincrement())
  productId Int?
  sellerId  Int?
  userId    String
  userName  String
  rating    Int
  comment   String
  date      DateTime @default(now())
  product   Product? @relation(fields: [productId], references: [id], onDelete: Cascade)
  seller    Seller?  @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([sellerId])
  @@index([userId])
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    String
  productId Int
  quantity  Int      @default(1)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([productId])
}

model Order {
  id              Int           @id @default(autoincrement())
  userId          String
  orderNumber     String        @unique
  status          String        @default("pending") // pending, completed, cancelled
  totalAmount     Decimal       @db.Decimal(10, 2)
  shippingAddress Json
  paymentDetails  Json?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  user            User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderItems      OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
}
